!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
MIGRATE_HARDCLOCKS	clock.c	55;"	d	file:
MINI_PER_SECOND	clock.c	69;"	d	file:
P	synch.c	/^P(struct semaphore *sem)$/;"	f	signature:(struct semaphore *sem)
SCHEDULE_HARDCLOCKS	clock.c	54;"	d	file:
SPINLOCK_INLINE	spinlock.c	31;"	d	file:
SPL_INLINE	spl.c	31;"	d	file:
THREADINLINE	thread.c	34;"	d	file:
THREAD_STACK_MAGIC	thread.c	58;"	d	file:
V	synch.c	/^V(struct semaphore *sem)$/;"	f	signature:(struct semaphore *sem)
allcpus	thread.c	/^static struct cpuarray allcpus;$/;"	v	typeref:struct:cpuarray	file:
clocknap	clock.c	/^clocknap(int num_ticks)$/;"	f	signature:(int num_ticks)
clocksleep	clock.c	/^clocksleep(int num_secs)$/;"	f	signature:(int num_secs)
cpu	thread.c	/^DECLARRAY(cpu);$/;"	v
cpu_create	thread.c	/^cpu_create(unsigned hardware_number)$/;"	f	signature:(unsigned hardware_number)
cpu_hatch	thread.c	/^cpu_hatch(unsigned software_number)$/;"	f	signature:(unsigned software_number)
cpu_startup_sem	thread.c	/^static struct semaphore *cpu_startup_sem;$/;"	v	typeref:struct:semaphore	file:
cv_broadcast	synch.c	/^cv_broadcast(struct cv *cv, struct lock *lock)$/;"	f	signature:(struct cv *cv, struct lock *lock)
cv_create	synch.c	/^cv_create(const char *name)$/;"	f	signature:(const char *name)
cv_destroy	synch.c	/^cv_destroy(struct cv *cv)$/;"	f	signature:(struct cv *cv)
cv_signal	synch.c	/^cv_signal(struct cv *cv, struct lock *lock)$/;"	f	signature:(struct cv *cv, struct lock *lock)
cv_wait	synch.c	/^cv_wait(struct cv *cv, struct lock *lock)$/;"	f	signature:(struct cv *cv, struct lock *lock)
exorcise	thread.c	/^exorcise(void)$/;"	f	file:	signature:(void)
hardclock	clock.c	/^hardclock(void)$/;"	f	signature:(void)
hardclock_bootstrap	clock.c	/^hardclock_bootstrap(void)$/;"	f	signature:(void)
interprocessor_interrupt	thread.c	/^interprocessor_interrupt(void)$/;"	f	signature:(void)
ipi_broadcast	thread.c	/^ipi_broadcast(int code)$/;"	f	signature:(int code)
ipi_send	thread.c	/^ipi_send(struct cpu *target, int code)$/;"	f	signature:(struct cpu *target, int code)
ipi_tlbshootdown	thread.c	/^ipi_tlbshootdown(struct cpu *target, const struct tlbshootdown *mapping)$/;"	f	signature:(struct cpu *target, const struct tlbshootdown *mapping)
lbolt	clock.c	/^static struct wchan *lbolt;$/;"	v	typeref:struct:wchan	file:
lock_acquire	synch.c	/^lock_acquire(struct lock *lock)$/;"	f	signature:(struct lock *lock)
lock_create	synch.c	/^lock_create(const char *name)$/;"	f	signature:(const char *name)
lock_destroy	synch.c	/^lock_destroy(struct lock *lock)$/;"	f	signature:(struct lock *lock)
lock_do_i_hold	synch.c	/^lock_do_i_hold(struct lock *lock)$/;"	f	signature:(struct lock *lock)
lock_release	synch.c	/^lock_release(struct lock *lock)$/;"	f	signature:(struct lock *lock)
minibolt	clock.c	/^static struct wchan *minibolt;$/;"	v	typeref:struct:wchan	file:
minicount	clock.c	/^static int minicount;$/;"	v	file:
schedule	thread.c	/^schedule(void)$/;"	f	signature:(void)
sem_create	synch.c	/^sem_create(const char *name, int initial_count)$/;"	f	signature:(const char *name, int initial_count)
sem_destroy	synch.c	/^sem_destroy(struct semaphore *sem)$/;"	f	signature:(struct semaphore *sem)
spinlock_acquire	spinlock.c	/^spinlock_acquire(struct spinlock *lk)$/;"	f	signature:(struct spinlock *lk)
spinlock_cleanup	spinlock.c	/^spinlock_cleanup(struct spinlock *lk)$/;"	f	signature:(struct spinlock *lk)
spinlock_do_i_hold	spinlock.c	/^spinlock_do_i_hold(struct spinlock *lk)$/;"	f	signature:(struct spinlock *lk)
spinlock_init	spinlock.c	/^spinlock_init(struct spinlock *lk)$/;"	f	signature:(struct spinlock *lk)
spinlock_release	spinlock.c	/^spinlock_release(struct spinlock *lk)$/;"	f	signature:(struct spinlock *lk)
spllower	spl.c	/^spllower(int oldspl, int newspl)$/;"	f	signature:(int oldspl, int newspl)
splraise	spl.c	/^splraise(int oldspl, int newspl)$/;"	f	signature:(int oldspl, int newspl)
splx	spl.c	/^splx(int spl)$/;"	f	signature:(int spl)
thread_bootstrap	thread.c	/^thread_bootstrap(void)$/;"	f	signature:(void)
thread_checkstack	thread.c	/^thread_checkstack(struct thread *thread)$/;"	f	file:	signature:(struct thread *thread)
thread_checkstack_init	thread.c	/^thread_checkstack_init(struct thread *thread)$/;"	f	file:	signature:(struct thread *thread)
thread_consider_migration	thread.c	/^thread_consider_migration(void)$/;"	f	signature:(void)
thread_create	thread.c	/^thread_create(const char *name)$/;"	f	file:	signature:(const char *name)
thread_destroy	thread.c	/^thread_destroy(struct thread *thread)$/;"	f	file:	signature:(struct thread *thread)
thread_exit	thread.c	/^thread_exit(void)$/;"	f	signature:(void)
thread_fork	thread.c	/^thread_fork(const char *name,$/;"	f	signature:(const char *name, struct proc *proc, void (*entrypoint)(void *data1, unsigned long data2), void *data1, unsigned long data2)
thread_make_runnable	thread.c	/^thread_make_runnable(struct thread *target, bool already_have_lock)$/;"	f	file:	signature:(struct thread *target, bool already_have_lock)
thread_panic	thread.c	/^thread_panic(void)$/;"	f	signature:(void)
thread_shutdown	thread.c	/^thread_shutdown(void)$/;"	f	signature:(void)
thread_start_cpus	thread.c	/^thread_start_cpus(void)$/;"	f	signature:(void)
thread_startup	thread.c	/^thread_startup(void (*entrypoint)(void *data1, unsigned long data2),$/;"	f	signature:(void (*entrypoint)(void *data1, unsigned long data2), void *data1, unsigned long data2)
thread_switch	thread.c	/^thread_switch(threadstate_t newstate, struct wchan *wc)$/;"	f	file:	signature:(threadstate_t newstate, struct wchan *wc)
thread_yield	thread.c	/^thread_yield(void)$/;"	f	signature:(void)
threadlist_addhead	threadlist.c	/^threadlist_addhead(struct threadlist *tl, struct thread *t)$/;"	f	signature:(struct threadlist *tl, struct thread *t)
threadlist_addtail	threadlist.c	/^threadlist_addtail(struct threadlist *tl, struct thread *t)$/;"	f	signature:(struct threadlist *tl, struct thread *t)
threadlist_cleanup	threadlist.c	/^threadlist_cleanup(struct threadlist *tl)$/;"	f	signature:(struct threadlist *tl)
threadlist_init	threadlist.c	/^threadlist_init(struct threadlist *tl)$/;"	f	signature:(struct threadlist *tl)
threadlist_insertafter	threadlist.c	/^threadlist_insertafter(struct threadlist *tl,$/;"	f	signature:(struct threadlist *tl, struct thread *onlist, struct thread *addee)
threadlist_insertafternode	threadlist.c	/^threadlist_insertafternode(struct threadlistnode *onlist, struct thread *t)$/;"	f	file:	signature:(struct threadlistnode *onlist, struct thread *t)
threadlist_insertbefore	threadlist.c	/^threadlist_insertbefore(struct threadlist *tl,$/;"	f	signature:(struct threadlist *tl, struct thread *addee, struct thread *onlist)
threadlist_insertbeforenode	threadlist.c	/^threadlist_insertbeforenode(struct thread *t, struct threadlistnode *onlist)$/;"	f	file:	signature:(struct thread *t, struct threadlistnode *onlist)
threadlist_isempty	threadlist.c	/^threadlist_isempty(struct threadlist *tl)$/;"	f	signature:(struct threadlist *tl)
threadlist_remhead	threadlist.c	/^threadlist_remhead(struct threadlist *tl)$/;"	f	signature:(struct threadlist *tl)
threadlist_remove	threadlist.c	/^threadlist_remove(struct threadlist *tl, struct thread *t)$/;"	f	signature:(struct threadlist *tl, struct thread *t)
threadlist_removenode	threadlist.c	/^threadlist_removenode(struct threadlistnode *tln)$/;"	f	file:	signature:(struct threadlistnode *tln)
threadlist_remtail	threadlist.c	/^threadlist_remtail(struct threadlist *tl)$/;"	f	signature:(struct threadlist *tl)
threadlistnode_cleanup	threadlist.c	/^threadlistnode_cleanup(struct threadlistnode *tln)$/;"	f	signature:(struct threadlistnode *tln)
threadlistnode_init	threadlist.c	/^threadlistnode_init(struct threadlistnode *tln, struct thread *t)$/;"	f	signature:(struct threadlistnode *tln, struct thread *t)
timerclock	clock.c	/^timerclock(void)$/;"	f	signature:(void)
wc_lock	thread.c	/^	struct spinlock wc_lock;	\/* lock for mutual exclusion *\/$/;"	m	struct:wchan	typeref:struct:wchan::spinlock	file:	access:public
wc_name	thread.c	/^	const char *wc_name;		\/* name for this channel *\/$/;"	m	struct:wchan	file:	access:public
wc_threads	thread.c	/^	struct threadlist wc_threads;	\/* list of waiting threads *\/$/;"	m	struct:wchan	typeref:struct:wchan::threadlist	file:	access:public
wchan	thread.c	/^struct wchan {$/;"	s	file:
wchan::wc_lock	thread.c	/^	struct spinlock wc_lock;	\/* lock for mutual exclusion *\/$/;"	m	struct:wchan	typeref:struct:wchan::spinlock	file:	access:public
wchan::wc_name	thread.c	/^	const char *wc_name;		\/* name for this channel *\/$/;"	m	struct:wchan	file:	access:public
wchan::wc_threads	thread.c	/^	struct threadlist wc_threads;	\/* list of waiting threads *\/$/;"	m	struct:wchan	typeref:struct:wchan::threadlist	file:	access:public
wchan_create	thread.c	/^wchan_create(const char *name)$/;"	f	signature:(const char *name)
wchan_destroy	thread.c	/^wchan_destroy(struct wchan *wc)$/;"	f	signature:(struct wchan *wc)
wchan_isempty	thread.c	/^wchan_isempty(struct wchan *wc)$/;"	f	signature:(struct wchan *wc)
wchan_lock	thread.c	/^wchan_lock(struct wchan *wc)$/;"	f	signature:(struct wchan *wc)
wchan_sleep	thread.c	/^wchan_sleep(struct wchan *wc)$/;"	f	signature:(struct wchan *wc)
wchan_unlock	thread.c	/^wchan_unlock(struct wchan *wc)$/;"	f	signature:(struct wchan *wc)
wchan_wakeall	thread.c	/^wchan_wakeall(struct wchan *wc)$/;"	f	signature:(struct wchan *wc)
wchan_wakeone	thread.c	/^wchan_wakeone(struct wchan *wc)$/;"	f	signature:(struct wchan *wc)
